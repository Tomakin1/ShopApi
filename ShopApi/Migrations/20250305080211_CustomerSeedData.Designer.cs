// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopApi.Context;

#nullable disable

namespace ShopApi.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20250305080211_CustomerSeedData")]
    partial class CustomerSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShopApi.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ShopApi.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "lastName");

                    b.Property<int>("TCKN")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7f3a7f3-7a7f-4a6a-bfe7-8dbdd24dbd9c"),
                            Email = "tomakintomakin05@gmail.com",
                            FirstName = "Ömer",
                            LastName = "Tomakin",
                            TCKN = 231
                        },
                        new
                        {
                            Id = new Guid("b8f3b8f3-8b8f-4b7b-cfe8-9dbdd25dcf9d"),
                            Email = "ali.yilmaz@example.com",
                            FirstName = "Ali",
                            LastName = "Yılmaz",
                            TCKN = 234
                        },
                        new
                        {
                            Id = new Guid("c9f4c9f4-9c9f-4c8c-dfe9-0dbdd26dcf9e"),
                            Email = "ayse.kara@example.com",
                            FirstName = "Ayşe",
                            LastName = "Kara",
                            TCKN = 235
                        },
                        new
                        {
                            Id = new Guid("d1f5d1f5-0d0f-4d9d-e0f0-1dbdd27ddf9f"),
                            Email = "murat.demir@example.com",
                            FirstName = "Murat",
                            LastName = "Demir",
                            TCKN = 236
                        },
                        new
                        {
                            Id = new Guid("e2f6e2f6-1e1f-5e0e-f1f1-2dbdd28eea9f"),
                            Email = "fatma.ozturk@example.com",
                            FirstName = "Fatma",
                            LastName = "Öztürk",
                            TCKN = 237
                        },
                        new
                        {
                            Id = new Guid("f3f7f3f7-2f2f-6f1f-8f8f-3dbdd29ffb9f"),
                            Email = "mehmet.celik@example.com",
                            FirstName = "Mehmet",
                            LastName = "Çelik",
                            TCKN = 238
                        });
                });

            modelBuilder.Entity("ShopApi.Models.CustomerDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerDetails");
                });

            modelBuilder.Entity("ShopApi.Models.CustomersBrand", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.HasKey("CustomerId", "BrandId");

                    b.HasIndex("BrandId");

                    b.ToTable("CustomerBrands");
                });

            modelBuilder.Entity("ShopApi.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ShopApi.Models.CustomerDetail", b =>
                {
                    b.HasOne("ShopApi.Models.Customer", "Customer")
                        .WithOne("CustomerDetail")
                        .HasForeignKey("ShopApi.Models.CustomerDetail", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ShopApi.Models.CustomersBrand", b =>
                {
                    b.HasOne("ShopApi.Models.Brand", "Brand")
                        .WithMany("CustomersBrands")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopApi.Models.Customer", "Customer")
                        .WithMany("CustomersBrands")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ShopApi.Models.Product", b =>
                {
                    b.HasOne("ShopApi.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopApi.Models.Customer", "Customer")
                        .WithMany("Products")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ShopApi.Models.Brand", b =>
                {
                    b.Navigation("CustomersBrands");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ShopApi.Models.Customer", b =>
                {
                    b.Navigation("CustomerDetail");

                    b.Navigation("CustomersBrands");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
